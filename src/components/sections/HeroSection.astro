---
/**
 * Hero Section fullscreen avec :
 * - Animation WebGL particules (fond)
 * - H1 avec animation lettres en cascade
 * - Sous-titre
 * - 2 CTA (primaire + secondaire)
 * - Scroll indicator animé
 */
import ParticlesBackground from '@/components/react/ParticlesBackground';
import { siteConfig, getPhoneLink } from '@/data/siteConfig';
---

<section
  id="hero"
  class="relative min-h-screen flex items-center justify-center overflow-hidden bg-gradient-to-br from-primary to-primary-900"
>
  <!-- Particules WebGL background -->
  <ParticlesBackground client:load particleCount={400} />

  <!-- Image de fond Rudy Capello avec parallax subtil -->
  <div class="absolute inset-0 -z-5 opacity-30">
    <div
      class="w-full h-full bg-cover bg-center"
      style="background-image: url('/images/hero/rudy-capello-elagueur.webp'); will-change: transform;"
      data-parallax
    >
    </div>
  </div>

  <!-- Gradient overlay pour meilleure lisibilité -->
  <div class="absolute inset-0 bg-gradient-to-t from-primary-900/80 via-transparent to-transparent -z-5"></div>

  <!-- Content -->
  <div class="container-custom relative z-10 text-center">
    <div class="max-w-5xl mx-auto space-y-8 animate-on-scroll">
      <!-- H1 avec animation de lettres + text-shadow pour contraste -->
      <h1
        class="text-white font-display font-extrabold text-balance hero-text"
        style="font-size: clamp(2.5rem, 8vw, 5rem); line-height: 1.1;"
        data-split-text
      >
        Expert en élagage
        <span class="block text-accent">{siteConfig.serviceArea.mainCity}</span>
      </h1>

      <!-- Sous-titre avec text-shadow pour contraste -->
      <p
        class="text-xl md:text-2xl text-white/90 max-w-3xl mx-auto leading-relaxed hero-text"
        style="animation-delay: 0.2s;"
      >
        {siteConfig.business.tagline}. Devis gratuit sous 24h, intervention rapide.
      </p>

      <!-- CTA Buttons -->
      <div
        class="flex flex-col sm:flex-row items-center justify-center gap-4 pt-8"
        style="animation-delay: 0.4s;"
      >
        <!-- CTA Primaire : Devis gratuit -->
        <a
          href="/contact"
          class="group relative inline-flex items-center gap-3 px-10 py-5 bg-accent text-white font-bold text-lg rounded-xl overflow-hidden transition-all duration-300 hover:scale-105 hover:shadow-glow focus-visible:ring-4 focus-visible:ring-accent/30 w-full sm:w-auto justify-center"
        >
          <!-- Ripple effect on hover -->
          <span class="absolute inset-0 bg-gradient-to-r from-accent-light to-accent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></span>
          <span class="relative z-10">Devis gratuit</span>
          <svg
            class="relative z-10 w-5 h-5 transition-transform duration-300 group-hover:translate-x-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13 7l5 5m0 0l-5 5m5-5H6"
            />
          </svg>
        </a>

        <!-- CTA Secondaire : Appeler -->
        <a
          href={getPhoneLink()}
          class="group inline-flex items-center gap-3 px-10 py-5 border-2 border-white text-white font-bold text-lg rounded-xl transition-all duration-300 hover:bg-white hover:text-primary hover:scale-105 focus-visible:ring-4 focus-visible:ring-white/30 w-full sm:w-auto justify-center"
        >
          <svg
            class="w-5 h-5 transition-transform duration-300 group-hover:scale-110"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
            />
          </svg>
          <span>{siteConfig.business.phoneDisplay}</span>
        </a>
      </div>

      <!-- Badges de réassurance -->
      <div
        class="flex flex-wrap items-center justify-center gap-4 pt-12"
        style="animation-delay: 0.6s;"
      >
        {siteConfig.business.reassuranceBadges.map((badge) => (
          <div
            class={`
              group relative px-6 py-3 rounded-xl backdrop-blur-sm transition-all duration-300
              ${badge.highlight
                ? 'bg-accent text-white shadow-lg hover:shadow-glow hover:scale-105'
                : 'bg-white/10 text-white border border-white/20 hover:bg-white/20 hover:border-white/30'
              }
            `}
          >
            <div class="flex items-center gap-3">
              <!-- Icon dynamique selon le type -->
              {badge.icon === 'target' && (
                <svg class={`w-5 h-5 ${badge.highlight ? 'text-white' : 'text-accent'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              )}
              {badge.icon === 'credit-card' && (
                <svg class={`w-5 h-5 ${badge.highlight ? 'text-white' : 'text-accent'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>
                </svg>
              )}
              {badge.icon === 'shield-check' && (
                <svg class={`w-5 h-5 ${badge.highlight ? 'text-white' : 'text-accent'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
                </svg>
              )}
              <span class="font-semibold text-sm md:text-base whitespace-nowrap">
                {badge.text}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- Scroll indicator animé -->
  <a
    href="#services"
    class="absolute bottom-12 left-1/2 -translate-x-1/2 flex flex-col items-center gap-2 text-white/60 hover:text-white transition-colors duration-300 group animate-on-scroll"
    aria-label="Défiler vers les services"
  >
    <span class="text-sm font-medium uppercase tracking-wider">Découvrir</span>
    <svg
      class="w-6 h-10 animate-bounce"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 14l-7 7m0 0l-7-7m7 7V3"
      />
    </svg>
  </a>
</section>

<script>
  /**
   * Parallax effect pour l'image de fond
   * Mouvement subtil au scroll pour effet de profondeur
   */
  const parallaxElements = document.querySelectorAll('[data-parallax]');

  if (parallaxElements.length > 0) {
    let ticking = false;

    const updateParallax = () => {
      const scrolled = window.pageYOffset;

      parallaxElements.forEach((element) => {
        const speed = 0.3; // Vitesse du parallax (plus petit = plus subtil)
        const yPos = -(scrolled * speed);
        (element as HTMLElement).style.transform = `translate3d(0, ${yPos}px, 0)`;
      });

      ticking = false;
    };

    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(updateParallax);
        ticking = true;
      }
    });
  }

  /**
   * Animation de lettres avec GSAP SplitText
   * (Simplifié ici, peut être enrichi avec la lib SplitType)
   */
  const splitTextElements = document.querySelectorAll('[data-split-text]');

  splitTextElements.forEach((element) => {
    const text = element.textContent || '';
    const chars = text.split('');

    element.innerHTML = chars
      .map(
        (char, i) =>
          `<span style="display: inline-block; opacity: 0; animation: fadeInChar 0.5s ease-out forwards; animation-delay: ${i * 0.03}s;">${char === ' ' ? '&nbsp;' : char}</span>`
      )
      .join('');
  });
</script>

<style>
  /* Text shadow pour lisibilité maximale sur tous les fonds */
  .hero-text {
    text-shadow:
      0 2px 10px rgba(0, 0, 0, 0.3),
      0 4px 20px rgba(0, 0, 0, 0.2),
      0 1px 3px rgba(0, 0, 0, 0.4);
  }

  @keyframes fadeInChar {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Smooth scroll anchor */
  #services {
    scroll-margin-top: 100px;
  }
</style>
